JSP 
	http://172.16.5.6:8888/my/first.jsp
	http://172.16.5.6:8888/my/test.html
	html:静态页面
	动态web页面
	servlet:java+HTML
	JSP:HTML+JAVA
	login.jsp
1、jsp的生命周期
    1) 翻译阶段
	当容器接受到客户端第一次对jsp的请求后，
	先判断被请求的jsp是否存在，若不存在返回404错误，
	若存在，将该jsp先翻译成一个Servlet。

    2) 编译阶段
	将Servlet的源文件编译成一个字节码文件，
	然后由容器将其装载进虚拟机并实例化(单例)
    3) 执行阶段
	调用Servlet的init()、service方法、destroy()。
 
    补充:
	1) 如果被请求的jsp源文件内容发生变化，那么要重新将jsp翻译成Servlet，再编译、装载和实例化，最后运行Servlet。
	2) 如果第二次请求jsp时，此时若被请求的jsp已经有对应的Servlet实例，那么就直接运行该Servlet。

2、MVC
    1) M(Model 模型)--->JavaBean
    2) V(View 视图)---> jsp、html(显示)
    3) C(Controller 控制器)---> servlet(控制和转发请求)

3、jsp中的元素
     1) 脚本元素 
	a) 声明(Declaration)
	    语法: <%!声明的内容%>
	    作用: 在servlet中声明一些成员变量、成员方法和内部类
	    特点: 声明被翻译进servlet后变成了成员变量、成员方法和内部类
	    注意: 不能使用表达式和隐含对象

	b) 表达式(Expression)
	    语法: <%=expression%>
	    作用: 将expression输出到out(输出流)中，
	    expression可以是算术、逻辑、关系表达式、变量、
	    有返回值的方法、jsp中的9种隐含对象。
	    9种隐含对象: 
	      page  request response 
	      session application  pageContext out config 
	      exception  isErrorPage="true"
	    
	    特点: 表达式翻译进servlet后变成了out.print(expression),该代码处于
	    _jspService()方法中;

	    注意: expression都一律被转换成
	    字符串后再写到输出流out(JspWriter)中。
	    另外，expression中不能有分号(;)。
		
	c) 脚本(Scriptlet)
	     语法: <%java code%>
	     作用: 在jsp中嵌入java代码，不能嵌入成员变量、成员方法。
	     特点: 脚本被翻译进servlet的_jspService()方法中。

     2) 指令元素
	a) page指令
	    语法: <%@ page attributeName="attribuerValue"...%>
	    作用: 利用page指令中的属性可以和容器进行通信，这些属性的设置对整个jsp都有影响。
	http://172.16.5.6:8888/JSP_pre/image/logo.jpg
	webRoot
		--image
			--logo.jpg
		--header.jsp  <img src="图片目录"/>
		--jsp
			--second.jsp include header.jsp

	b) include指令
	     语法: <%@ include file="url"%>，称为静态导入(静态包含)
	     作用: 在一个页面中导入另一个页面的内容(这些内容一般不会有变化，如公司的标题和版权等信息)。
	     特点: 在jsp翻译成servlet后就将被导入的页面内容嵌入到servlet中。
	           导入时间发生在翻译阶段。
	     被导入的资源: html、xml、jsp等

	     优点: 执行效率高
	     缺点: 当被导入页面的内容发生变化，那么jsp必须要重新被翻译。

	c) taglib指令
		<%@ taglib uri="" prefix=""%>
		指定在jsp中要使用的标签库描述文件(*.tld)的路径

	
     3) 动作元素(jsp自带的标准标签)
	语法: <jsp:tagName/>

	a) 动态导入(动态包含)
	   语法: <jsp:include page="url" flush="true|false"/> 或者
	  	 <jsp:include page="url" flush="true|false">
			{<jsp:param …/>}*
	  	 </jsp:include> 

	  特点: 动态导入发生在执行阶段，也就是在运行serlvet的时候才动态生成被导入页面的内容，然后嵌入到调用页面，最后将两个页面的内容一起返回给客户端。
	  注意: 在翻译阶段并没有生成被导入页面的内容。

	  缺点: 执行效率没有静态导入高
	  优点: 如果被导入页面的内容发生变化，调用页面不必重新翻译。
    
       b) forward(服务器内部跳转)
	  语法: <jsp:forward page="url"/>或者
		<jsp:forward page="url">
           		{<jsp:param …/>}*
		</jsp:forward>

4、jsp中的注释
    a) HTML/XML注释
	语法: <!-- content -->
	注意: 它只能注释html、xml中的静态内容。不能注释脚本元素、指令元素和动作元素。如果注释，它们还是会被编译执行。

    b) 隐藏注释
	语法: <%-- content --%>
	注意: 它可以注释jsp中所有的内容。

    c) 脚本注释
	语法: <	%
		//java code

		/**
		  java code
		*/

		/*
		   java code
		*/
	      %>

三种注释的区别:
			  servlet源文件	客户端	页面源文件		 浏览器显示

HTML/XML注释        出现		   出现				  不显示

隐藏注释  			不出现		  不出现			          不显示

脚本注释			  出现		   不出现				  不显示

page指令中的属性:
				language="java"
					定义要使用的语言，目前只能是java
				import="package.class,package2.class2"
					和一般的java import意义一样，用","来隔开
				contentType="text/html;charset=UTF-8"
					定义response中的内容类型
					和jsp页面的编码格式，
					翻译后变成response.setContentType("text/html;charset=UTF-8")。
				session="true|false"  默认为true
					指定一个Http的session中这个页面是否参与
                                        指定这个jsp中是否可以使用session
				buffer="none|8kb|sizekb" 默认为8kb
					指定到客户端输出流的缓冲模式，
					如果是none则不缓冲，如果指定数值，
					那么输出就用不小于这个值的缓冲区进行缓冲。
				autoFlush="true|false"  默认为true
					true 当缓冲区满时，到客户端的输出被刷新
					false 当缓冲区满时，出现运行异常，表示缓冲溢出
				isThreadSafe="true|false"  默认为true
					用来设置jsp文件是否能支持多线程的使用。
					如为true，那么一个jsp能够同时处理多个用户的请求，
					反之，一个jsp只能一次处理一个请求。
				info="text"
					关于jsp页面的信息，定义一个字符串，
					可以使用getServletInfo()获得
				errorPage="b.jsp"   默认忽略
					定义此页面出现异常时调用的页面
				isErrorPage="true|false"   默认为false
					表明当前的页面是否为其它页面的errorPage目标，如果设置为true，则可以使用exception对象。反之，如果设置为false，则不可以使用exception对象
				extends="package.class"
					指定jsp对应的servlet类继承某个父类
				isELIgnored="true|false" 
					指定EL表达式语言是否被忽略，如为true则忽略，反之可以使用EL。
				pageEncoding="UTF-8"
					实现功能跟contentType="text/html;charset="UTF-8"一致，
			但是两者若同时设置，jsp页面的编码格式以pageEncoding为准，
			response中的内容类型和编码格式以contentType为准。

	login.jsp->check.jsp

			      表达式语言(EL)中定义了一些可以使用的隐含对象:
	${}
	1) pageContext: jsp页面的上下文，它提供了访问以下对象的方法
		a) servletContext 
			${pageContext.servletContext}
			等于
			out.println(pageContext.getServletContext())
		b) session
			${pageContext.session.id}
			等于
			out.println(pageContext.getSession().getId())
		c) request
			${pageContext.request}
			等于
			out.println(pageContext.getRequest())
		d) response
			${pageContext.response}
			等于
			out.println(pageContext.getResponse())
	${param}
	${param.name} 
	2) param: 把请求中的参数和单个值进行映射
		${param.name}或者${param["name"]}或者${param['name']}
		等于
		out.println(request.getParameter("name"))
	  注意：指定参数不存在的话
	  ${param.name}如果获取不到值返回""。
	        request.getParameter("namex")如果获取不到值返回null。

	3) paramValues: 把请求中的参数和一个array值进行映射
		${paramValues.hobby}或者${paramValues["hobby"]}或者${paramValues['hobby']}
	   	等于
		String[] array = request.getParameterValues("hobby")
        	out.println(array);

	4) header: 把请求头中header的字段和单个值映射
		${header.referer}
		等于
		out.println(request.getHeader("referer"));
		//获得http request请求头中所有字段名字
		Enumeration e = 
			request.getHeaderNames();


	5) headerValues: 把请求头中header的字段和一个枚举进行映射
		${headerValues.referer}
		等于 
		Enumeration enum = 
			request.getHeaders("referer")
		out.println(enum);

	6) cookie: 把请求中的Cookie和单个值进行映射
		Cookie cookie = new Cookie("height","100");
		Cookie cookie2 = new Cookie("width","200");
		response.addCookie(cookie);
		response.addCookie(cookie2);

                在服务器端获得从客户端发送过来的cookie:
		${cookie.height}: 输出一个Cookie的对象
		${cookie.height.name}=${cookie.height.value}
			分别输出Cookie的名称和值(height=100)
    		${cookie.width}: 同上
		${cookie.width.name}=${cookie.width.value}: 同上

	7) initParam: 把Web应用上下文的初始化参数和单个值进行映射
		${initParam.name}
		等于
		String value = getServletContext()
				.getInitParameter("name");
		out.println(value);

	8) pageScope: 把page范围中的key和value进行映射
		pageContext.setAttribute
				("name","jack");
		
		${pageScope.name}
		等于
		out.println
		(pageContext.getAttribute("name"));

	9) requestScope: 把request范围中的key和value进行映射
		request.setAttribute("name","jack");
		${requestScope.name}
		等于
		out.println(request.getAttribute("name"));

	10) sessionScope: 把session范围中的key和value进行映射
		session.setAttribute("name","jack");
		${sessionScope.name}
		等于
		out.println(session.getAttribute("name"));

	11) applicationScope: 把application范围中的key和value进行映射
		getServletContext().setAttribute("name","jack");
		${applicationScope.name}
		等于
		out.println(getServletContext().getAttribute("name"));

	   注意: 如果没有指明任何的范围根据key来查找对应的value，
	   默认从page、request、session和application从小到大的范围开始查找，若找到就不往更大的范围去查找。
	例如: ${name} ,分别从page request session 
	和 application中去查找name的值
(scope.getAttribute("name")),scope为上面四种范围。
			
								JSTL
要导入标签库才能使用,5大标签库 下面介绍的是 core JSTL
1、<c:out> 
	功能: 将结果输出到JspWriter输出流中
	1) 语法1: <c:out value="result" 
		[escapeXml]="{true|false}" 
		[default="defaultValue"]/>
	   如果result为null，则输出default中的值

	2) 语法2: <c:out value="result" 
			[escapeXml]="{true|false}">
			default value
	   	  </c:out>

	例如: <c:out value="${student.address.country}"/>
	      等于
	      ${student.address.country}

2、<c:set>
	功能: 在某个范围中设置某个值或者设置某个对象的属性值
	1) 在某个范围中设置某个值
		语法1: <c:set var="varName" value="attrValue" 
				[scope="page|request|session|application"]/>
		等于
		scope.setAttribute("varName",attrValue);
		varName --> 存放在scope中的key 
		attrValue --> 存放在scope中的value

		例如:  <c:set var="name" value="jack" 
					scope="request"/>
                        等于
			request.setAttribute("name","jack");

		       <c:set var="addr" value="${address}" 
					scope="request"/>
			等于
			request.setAttribute("addr",address);

		语法2: <c:set var="varName" [scope]>
		 	   attrValue
		       </c:set>

		注意: scope为存放范围，默认为page。  
	
	2) 设置某个对象的属性值，例如: 
		语法1: <c:set target="${student}"
				property="name" value="jack"/>
	
		语法2: <c:set target="${student}" property="name">
			   jack
		       </c:set>
		
		注意: 属性scope不能在这里使用。

3、<c:remove>
	功能: 删除某个范围中的某个值
	语法: <c:remove var="varName" 
			[scope="page|...."]/>
		等于	
	      scope.removeAttribute("varName");
	      varName --> 该值存放在scope中的key
    	     
	注意: 在指定scope中根据varName来删除某个值，
	如果没有指定scope，那么依次从page、request、
	session和application范围中根据varName去删除
	某个值。

4、<c:catch> 
	功能: 捕获由嵌套在它里面的代码抛出的异常
    	语法: <c:catch [var="varName"]>
		 nested code
	      </c:catch>
	     varName --> 异常对象存放在scope中的key，scope默认为page。

5、<c:if>
	功能: 进行条件判断
	语法:   <c:if test="condition" var="varName" [scope]>
		 	body content
		 </c:if>
	      varName --> 条件判断结果(布尔型变量)存放在scope中的key，scope为存放范围。

6、<c:choose>
	功能: 用于条件选择，它和<c:when>以及<c:otherwise>一起使用
	语法:   <c:choose>
		        (<when> and <otherwise>)
		</c:choose>
	注意: body体内容只能由以下的元素构成
		1) 空格
		2) 0个或者多个<when>子标签，<when>必须出现在<c:choose>和<c:ohterwise>之间
		3) 0个或者多个<ohterwise>

7、<c:when>
	功能: 代表了<c:choose>的一个分支
	语法: <c:when test="condition">
		  body content
	      </c:when>
	注意: 必须以<c:choose>作为它的父标签，必须在<c:otherwise>之前出现。

8、<c:otherwise>
	功能: <c:choose>的最后的选择
	语法: <c:otherwise>
		body 
	      </c:otherwise>	
	注意: 必须以<c:choose>作为父标签，必须是<c:choose>的最后分支

9、迭代标签
	1) <c:forEach>
		功能: 用来迭代集合、数组、枚举、Iterator或者固定次数
		语法1: 	<c:forEach [var="varName"] items="Collection/array/Enumaration/Iterator"
				[varStatus="varStatusName"]
				[begin="begin"] 
				[end="end"]
				[step="step"]>
	   		   body content
			</c:forEach>

   		语法2: 迭代固定的次数(做普通的循环输出,类似for循环)
			<c:forEach [var="varName"] 										[varStatus="varStatusName"] 
				begin="begin" end="end" [step="step"]>
		   	   body content
			</c:forEach>

		名字		类型		描述
		for(String s:list){
			
		}
		var		String		迭代出来的值存放在scope中的key
		items	     任何支持的类型	将要迭代itmes的集合/数组/枚举/Iterator
		varStatus	String		迭代的状态，可以访问迭代的自身信息
		current当前这次迭代的（集合中的）项
		index当前这次迭代从 0 开始的迭代索引
		count当前这次迭代从 1 开始的迭代计数
		first用来表明当前这轮迭代是否为第一次迭代的标志
		last用来表明当前这轮迭代是否为最后一次迭代的标志
		
		begin		int		items从index[begin]开始迭代
						没有指定items从index开始做循环
		end 		int 		items从index[end]结束
						没有指定items从end结束
		step		int		迭代的步长(>0)

		5行2列
		序号  值

	2) <c:forTokens>
		功能: 类似java中的StringTokenizer，专门用于处理TokenString的迭代，可以指定一个或者多个分隔符号(delimiters)。
		语法: <c:forTokens items="stringOfTokens" 
				delims="delimiters"
				[var="varName"] 										[varStatus="varStatusName"] 
				[begin="begin"] [end="end"] 									[step="step"]>
			   body content
		      </c:forTokens>

10、URL相关的标签
	1) <c:import>
		功能: 导入一个基于URL的资源，实现的功能
		和<jsp:include page="url" flush="true"/>一样。
		
		语法: <c:import url="url" [var="varName"] [scope]>
			   [<c:param/>]*
		      </c:import>
		varName --> URL资源内容存放在scope中的key，scope为存放范围。

	2) <c:url>
		功能: 用于重新构造URL，主要用途是URL重写。
		语法: <c:url value="url" [var="varName"] [scope]>
				[<c:param/>]*
		      </c:url>
		varName --> 重写后的URL存放在scope中的key，scope为存放范围。

	3) <c:redirect>
		功能: 把客户的请求重定向到另一个资源
		语法: <c:redirect url="url"> 
				[<c:param/>]*
		       </c:redirect>
		注意: 该标签已经对url重写过了，重定向的url是被重写后的url。
	4) <c:param>
		功能: 在<c:import>、<c:url>和<c:redirect>中添加请求的参数
		语法1: <c:param name="name" value="value"/>
		语法2: <c:param name="name">
				parameter value
		       </c:param>

		       登录成功后，跳转到产品列表界面

